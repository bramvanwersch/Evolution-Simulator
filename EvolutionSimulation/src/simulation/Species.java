package simulation;

import genome.Genome;

public class Species{
	private final int ENERGY_DIVISION = 2;
	private final int DEFAULT_SCENT_RANGE = 60;
	private final int DEFAULT_ENERGY = 4000;
	private int WINDOW_SIZE = 950;
	private Genome genome;
	private int no;
	private int xLoc;
	private int yLoc;
	private int energy;
	private double facingDirection;
	private int age;
	private int lastRepCycle;
	private String name;
	private double eatSizeFactor;
	
	//constructor for innitial species construction
	public Species(int size, int speed, int maxAge, String name, double eatSizeFactor) {
		this.genome = new Genome(new String[] {"size","speed","maxAge","scentRange"}, new int[] {size, speed, maxAge, DEFAULT_SCENT_RANGE});
		this.genome.setGeneValues();
		this.energy = DEFAULT_ENERGY;
		this.no = 0;
		this.age = 1;
		this.lastRepCycle = 0;
		this.facingDirection = Math.random() * 2 * Math.PI;
		this.xLoc = (int) (Math.random()*(WINDOW_SIZE - getSize()) + 0.5* size);
		this.yLoc = (int) (Math.random()*(WINDOW_SIZE - getSize()) + 0.5* size);
		this.name = name;
		this.eatSizeFactor = eatSizeFactor;
	}
	
//Constructor for multiplying
	public Species(int x, int y, int energy, Genome genome, int number, String name, double eatSizeFactor) {
		this.genome = genome;
		//make species grow
		this.energy = energy;
		this.no = number;
		this.age = 1;
		this.facingDirection = Math.random() * 2 * Math.PI;
		this.lastRepCycle = 0;
		this.xLoc = x;
		this.yLoc = y;
		this.name = name;
		this.eatSizeFactor = eatSizeFactor;
	}

	public double getEnergyConsumption() {
		int r = getSize() / 2;
		double contentSurface = (1.33* Math.PI * Math.pow(r, 3)) /(4 * Math.PI * Math.pow(r, 2));
		return (Math.pow(1.4, contentSurface) - 1) + 0.5 * getSpeed() + 0.125 * (getScentRange() - getSize()) + getAge();
	}
	
	/**
	 * Function that returns the size of an organism towards its maximum value generated by the genome depending on how old
	 * the organism is. The formula describing it looks like a michaels menten formula. But the start
	 * value is set to 25 procent of the maximum value.
	 */
	public int getSize() {
		return (int) (((getGenome().getGeneValue("size") - 0.5 * getGenome().getGeneValue("size")) * getAge()) /
				(getAge() + 5) + 0.5 * getGenome().getGeneValue("size"));
	}
	
	public void move() {
		if (getEnergy() > 0) {
			double min = (getFacingDirection() - 0.25 * Math.PI);
			double max = (getFacingDirection() + 0.25 * Math.PI);
			setFacingDirection((Math.random() * (max - min)) + min);
			changeXLoc(Math.sin(getFacingDirection()) * getSpeed());
			changeYLoc((-1 * Math.cos(getFacingDirection()) * getSpeed()));
			changeEnergy(-1*getEnergyConsumption());
		}
	}
	
	public void scentMovement(int x, int y) {
		//method for inheriting classes
	}
	
	public boolean checkCanEat(int x, int y, int sSize, int sEnergy) {
		return false;
	}
	
	private double inXBounds(double d) {
		if (this.xLoc + d + 0.5 * getSize() > WINDOW_SIZE) {
			facingDirection += 0.25 * Math.PI;
			return 0;
		}
		else if (this.xLoc + d - 0.5 * getSize() < 0) {
			facingDirection += 0.25 * Math.PI;
			return 0;
		}
		else {
			return d;
		}
	}
	
	private double inYBounds(double d) {
		if (this.yLoc + d + 0.5 * getSize() > WINDOW_SIZE) {
			facingDirection += 0.25 * Math.PI;
			return 0;
		}
		else if (this.yLoc + d - 0.5 * getSize() < 0) {
			facingDirection += 0.25 * Math.PI;
			return 0;
		}
		else {
			return d;
		}
	}

	public boolean isCanMultiply() {
		if (this.energy/2 > DEFAULT_ENERGY && this.lastRepCycle > getRepTime()) {
			this.lastRepCycle = 0;
			return true;
		}
		return false;
	}
	
	public void changeXLoc(double d) {
		d = inXBounds(d);
		this.xLoc += Math.round(d);
	}

	public void changeYLoc(double d) {
		d = inYBounds(d);
		this.yLoc += Math.round(d);
	}
	
	protected void setFacingDirection(double fd) {
		facingDirection = fd;
	}
	
	public double getFacingDirection() {
		return this.facingDirection;
	}
	
	public int getScentRange() {
		return this.genome.getGeneValue("scentRange") + getSize();
	}
	
	public int getSpeed() {
		return this.genome.getGeneValue("speed");
	}
	
	public void addAge() {
		this.age += 1;
	}
	
	public void addRepTime() {
		this.lastRepCycle += 1;
	}
	
	public int getxLoc() {
		return xLoc;
	}
	
	protected void changeEnergy(double energyConsumption) {
		this.energy += energyConsumption;
	}

	public int getyLoc() {
		return yLoc;
	}
	
	public int getEnergy() {
		return this.energy;
	}
	
	public int halfEnergy() {
		energy = energy/ENERGY_DIVISION;
		return energy;
	}

	public int getAge() {
		return this.age;
	}
	
	public int getMaxAge() {
		return this.genome.getGeneValue("maxAge");
	}

	public Genome getGenome() {
		return genome;
	}
	
	public int getRepTime() {
		//for inheriting classes
		return 0;
	}
	
	public void setSpeed(int i) {
		this.genome.setGeneValue("speed", i);
	}
	
	public int getNumber() {
		return this.no;
	}
	
	public boolean foodEaten(int getxLoc, int getyLoc, int size2, int energy2) {
		// for inheriting classes
		return false;
	}

	public String getName() {
		return this.name;
	}

	public double getEatSizeFactor() {
		return this.eatSizeFactor;
	}
}
